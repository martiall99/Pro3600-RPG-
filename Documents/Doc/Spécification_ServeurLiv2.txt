//----------------------------CLASSES PRELIMINAIRES (utilisées par personnage)------------------

typedef struct Conteneur_carac Conteneur_carac;
struct Conteneur_carac
{
public:	
    int PV;
	int Mana;
	int PA;
	int DEF;// defence pour les ATTAQUES
	int RES;//resistance MAGIQUE
	int CRIT;// EN %*100
	int ESQ;// EN %*100
	int RENV;//renvoi des dommages
public:	
	std::string toString(); // ( + est la concaténation ici) donne PV+sep+Mana+sep+PA+sep+DEF+sep+RES+sep+CRIT+sep+ESQ+sep+RENV avec sep un pont virgule '  ;  '
};
std::ostream& operator<<( std::ostream &flux, Conteneur_carac const& cont );


class Action
{
	int a_id;
	std::string a_nom;
	std::string a_descr;
	std::string toString();// ( + est la concaténation ici) donne a_id+sep+sep+a_nom+sep+a_descr avec sep un pont virgule '  ;  '
	
public:
	Action(int id,std::string nom, std::string desc );
};
std::ostream& operator<<( std::ostream &flux, Action const& act );

//il faudrait définir (coder les fonctions supplémentaire par rapport à la classe Action) plusieurs objets qui HERITENT de la classe action
			// genre attaque simple, attaque puissante, bouclier, boule de feu , potion de vie, potion de mana ça devrait suffire pour liv2







// CE qui suit : 3 fois le même objet en gros, ce sera dégueulasse mais bon ça le fera pour le livrable 2...


class Trad_attaq
{
	
public:// pour le LIV2 c'est PAS encore un "tableau intelligent" juste quelquechose qui définit et créé des objets
	//utilisees par initTraducteurs() de Personnage

	Trad_attaq();//constructeur qui créé en son sein (construit)  attaque simple, attaque puissante, bouclier
			
			
	Action rechID(int id_r);// c'est la "principale" de cette classe, elle return() un des objets de type Action construit par le constructeur Trad_action() en focntion de l'id

	std::string listeID();//liste juste les ID séparéess par '   ;   ' , 
	std::string toString();//utilisé par l'opérateur <<,  lance le toString() de chaque action et les liste, séparéess par un '.'

};
std::ostream& operator<<( std::ostream &flux, Trad_attaq const& trad);//utilise toString()



class Trad_obj
{
	
public:// pour le LIV2 c'est PAS encore un "tableau intelligent" juste quelquechose qui définit et créé des objets
	//utilisees par initTraducteurs() de Personnage

	Trad_obj();//constructeur qui créé en son sein (construit) potion de vie, potion de mana
			
			
	Action rechID(int id_r);// c'est la "principale" de cette classe, elle return() un des objets de type Action construit par le constructeur Trad_action() en focntion de l'id

	std::string listeID();//liste juste les ID séparéess par '   ;   ' , 
	std::string toString();//utilisé par l'opérateur <<,  lance le toString() de chaque action et les liste, séparéess par un '.'

};
std::ostream& operator<<( std::ostream &flux, Trad_obj const& trad);//utilise toString()




class Trad_magie
{
	
public:// pour le LIV2 c'est PAS encore un "tableau intelligent" juste quelquechose qui définit et créé des objets
	//utilisees par initTraducteurs() de Personnage

	Trad_magie();//constructeur qui créé en son sein (construit) boule de feu
			
			
	Action rechID(int id_r);// c'est la "principale" de cette classe, elle return() un des objets de type Action construit par le constructeur Trad_action() en focntion de l'id

	std::string listeID();//liste juste les ID séparéess par '   ;   ' , 
	std::string toString();//utilisé par l'opérateur <<,  lance le toString() de chaque action et les liste, séparéess par un '.'

};
std::ostream& operator<<( std::ostream &flux, Trad_magie const& trad);//utilise toString()

class Trad_magie
{
	
public:// pour le LIV2 c'est PAS encore un "tableau intelligent" juste quelquechose qui définit et créé des objets
	//utilisees par initTraducteurs() de Personnage

	Trad_magie();//constructeur qui créé en son sein (construit) boule de feu
			
			
	Action rechID(int id_r);// c'est la "principale" de cette classe, elle return() un des objets de type Action construit par le constructeur Trad_action() en focntion de l'id

	std::string listeID();//liste juste les ID séparéess par '   ;   ' , 
	std::string toString();//utilisé par l'opérateur <<,  lance le toString() de chaque action et les liste, séparéess par un '.'

};
std::ostream& operator<<( std::ostream &flux, Trad_magie const& trad);//utilise toString()


// --------------------------------"VRAIS" OBJETS ------------------------------





//Variables communes
// Transfert tr; Aiguillage aig; Maitre_jeu m_j; 
const int ID_1; 
const int ID_2;


//variables de :
//transfert:
std::string IP_1;
std::string IP_2;
const std::string port_s;//un seul port serveur
const std::string port_c;//c'est le même pour les 2 clients aussi


//maitre_jeu
int num_coup_attendu;
int a_qui_jouer;
Personnage perso1; 
Personnage perso2; 
bool j_1_co;
bool j_2_co;
bool deb_tour;

//Personnage
private:
	Conteneur_carac caracs;
public://ouioui ce sont bien ses variables
	Trad_magie magies;
	Trad_attaq attaques;
	Trad_obj objets;


//----------------------------------------------------Méthodes de :


//initialisation de TOUTES les variables de tous les "objets" 
	void init();// c'est LITTERALEMENT un copié collé de ce qui est en dessous :

/*
//Variables communes
ID_1=1; 
ID_2=2;

//transfert:
IP_1="";
IP_2="";
port_s="";// A CHANGER !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
port_c="";// A CHANGER !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

//aiguillage:


//maitre_jeu
num_coup_attendu=0;
a_qui_jouer=ID_1;
perso1(); //on rappelle les constructeurs au cas ou
perso2(); 
j_1_co=false;
j_2_co=false;
deb_tour=true;

//Personnage
caracs();
magies();
attaques();
objets();
*/






	
//transfert:
private:
	void tCoClient();//(appelé lorsqu'un clietn se connecte) garde l'IP (dans le bon slot ) et appelle direct  co() de maitre_jeu
	void tDecoClient();//(appelé lorsqu'un clietn se deconnecte)appelle directement deco() de maitre_jeu
	void recoitMess(); //appelle direct decodeMess() de aiguillage
	
public:
	// utilisée par aiguillage
	void envoiMess(std::string mess, int id_dest );//envoie le mess à l'IP_x avec x tel que  id_dest = ID_x (ya que 2 x possible un simple if else if else (erreur)  suffit)
	//util au tout debut/fin
	void ouvrirConnex();// ouvre DEUX connexions à travers  1 port
	void fermerConnex();
	
	
	
	
//aiguillage
private:
	//remarque ici pas d'iT1, le jeu debute dès que les 2 clients sont connectés
	void iT3a(std::string mess);
	
public://util par transfert
	void decodeMess(string mess);// appelle les iTx ici uniquement iT3 donc en soit n'est pas nécessaire mais le sera pour livrable 3
	//util par m_j
		// POUR TOUTES CES FONCTIONS D'ENVOI : se référer au LIVRABLE 1 pour avoir la DESCRIPTION de l'architecture de chaque type de message
			//celles qui envoient au 2 grâce à deux appels de envoiMess()
	void envEtats(std::string e);//T4
	void envDeb();//T1d
	void envFin(int gagnant);//T1f 
	void envBibli(std::string bib);//T6
	void retransmet3(std::string a);//renvoie l'action qui vient dêtre effectuee AUX DEUX clients 
	void envID();//T0c: envoie les 2 ID à la suite 2 fois (une pour chaque destinataire) avec à chaque fois l'ID du destinataire en PREMIER ( ATTENTION !! )


			//celle qui n'envoie qu'à la bonne ID
	void envActs(std::string a, int ID_dest); //T2a  

	
	
	
//maitre_jeu
private:

	void initBibli();// on récupère les 3  attaques.toString(), magies.toString(), objets.toString()   puis appelle envBibli()
	void debutJeu();// 1) initTraducteurs() des 2 persos 2) initBibli() , 3)etatsPersos() des 2 puis envEtats()  4)  envDeb() 5) debTour()
	int aGagne();//renvoie l'id du joueur qui a gagné (joueur adverse a PV<=0 ) ou  -1 si 
	void debTour();//applique le  regenPA  de chaque personnage, puis lance tour()

	
public:
	//util par aiguillage
	void recoitT3A(int num_coup, int id_j, std::string ac);//verifie id et num_coup, puis incremente  num_coup_attendu, puis retransmet3() puis Act() de personnage
	
	//util par transfert 
	void co(int id);//SI j_1_co==false le met a true        OU           SI j_2_co==false le met a vrai ET et lance envID() ET lance debutJeu()
	void deco(int id);// arrete le jeu avec un envFin() avec en id 0 pour dire que c'est une erreur/pas de gagnant
	
	//util par perso
	void changeAQuiJouer();// change id puis SI deb_tour==true met deb_tourà false et lance debTour() SINON met deb_tour à true et lance tour();
	void tour();// 0) regarde a_qui_jouer ( PUIS vérifie aGagne() , interromp tout et envFin() si c'est le cas ) puis  1)recupere etatsPersos()  2) envEtats 3)recupere listeActionsPos() du bon joueur  puis 4) envActs() au bon joueur
	
	
	
//personnage
public:
	void regenPa();
	void Act(string a);// SI l'action ac ="00" => changeAQuiJouer() de maitre_jeu  , SINON utilise rechID() des 4 traducteurs puis effectue la bonne action puis lance tour() 
	void initTraducteurs();// ICI elle ne FAIT RIEN DU TOUT (dans le livrable 3 ce sera pas le cas), elle n'est PAS appelée par le constructeur 
	std::string listeActionsPos(int id_j);//on recupere les 3 attaques.listeID(), magies.listeID(), objets.listeID()  et on les concatène avec en séparateur ' /  '
	std::string etatsPerso();//recupere le caracs.toString() et sépare par ' . '