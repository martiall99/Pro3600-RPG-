//----------------------------CLASSES PRELIMINAIRES (utilisées par personnage)------------------

typedef struct Conteneur_carac Conteneur_carac;
struct Conteneur_carac
{
public:	
    int PV;
	int Mana;
	int PA;
	int DEF;// defence pour les ATTAQUES
	int RES;//resistance MAGIQUE
	int CRIT;// EN %*100
	int ESQ;// EN %*100
	int RENV;//renvoi des dommages
public:	
	std::string toString();// PAS sur qu'on ait le droit comme c'est une struct, mais je crois que si au pire tout mettre dans le operator<<
};
std::operator<<();// REMPLIR LA PARENTHESE ICI avec un Conteneur_carac  et ce qu'il faut


class Action
{
	int a_id;
	std::string a_nom;
	std::string a_descr;
	std::string a_type;//attaque, magie, potion, buff....
	std::string toString();
	
public:
	Action();//constructeur "vide" créer juste les structures en les laissant vides
};
std::operator<<();// REMPLIR LA PARENTHESE ICI avec un Action  et ce qu'il faut

class Trad_action
{
	vector <int> ID;
	vector <Action*> act;// oui c'est un mineur , utiliser -> pour accéder aux méthodes/variables a la place du point usuel !
        Action erreur// renvoyé par rechid si il ne trouve pas de correspondance	
public://utilisees par initTraducteurs() de Personnage

	Trad_action();//constructeur "vide" créer juste les structures en les laissant vides
        Trad_action(Trad_action a_copier)//constructeurdecopie, il est nécessaire car on utilise des pointeurs
        ~Trad_action()//destructeur probablement nécessaire avec les pointeurs
	
	void ajAction(int id_a, Action *ac);//ajoute l id et le pointeur dans chaque tableau avec des push front 
	void enlAction(int id_a);// utilise rech() puis supprime les deux cases correspondantes
	std::string toString();//utilisé par l'opérateur <<
	bool verifPasDoublons();
	int rech(int id);//renvoie le numéro de la case du tableau correspondant a l id
	Action* rechIDhID(int id_r);// utilise rech() puis r'envoie le pointeur du deuxième tableau dans la même case 
};
std::operator<<();// REMPLIR LA PARENTHESE ICI avec un Trad_action  et ce qu'il faut


class Tab_buffs_effectifs
{
	vector <int> ID;
	vector <int> nb_tours_restants;
	int buffer_boucle;//init a 0 dans le constructeur
public:		
	Tab_buffs_effectifs();//constructeur "vide" créer juste les structures en les laissant vides
	
	void ajBuff(int ID_b, int nb_tours);
	void enlBuff(int ID_b);
	void decrementeBuff(int ID_b);//decremente de 1 le compteur nb_tours_restants  ATTNETION n'appelle PAS enlbuff si arrive à 0 (sinon problème de parcours du tableau)
	void enlTousBuffsFinis(); parcours le tableau et appelle enlBuff si nb_tours_restants arrive a 0 ATTENTION 
	int parcourBuff();// lit et renvoie l' ID de l'element en position buffer_boucle, lorsque l'on arrive à la fin du tableau, on appelle enlTousBuffsFinis() , on remet buffer à 0 et on renvoie -1 
	std::string toString();
};
std::operator<<();// REMPLIR LA PARENTHESE ICI avec un Tab_buffs_effectifs  et ce qu'il faut


// --------------------------------"VRAIS" OBJETS ------------------------------





//Variables communes
// Transfert tr; Aiguillage aig; Superviseur supe; Maitre_jeu m_j; 
 int id_1; 
 int id_2;


//variables de :
//transfert:
std::string IP_1;
std::string IP_2;
std::string port_s;
std::string port_c;

//aiguillage:


//superviseur:
bool ok_1;
bool ok_2;

//maitre_jeu
int num_coup_attendu;
Personnage perso1; 
Personnage perso2; 

//Personnage
Conteneur_carac caracs;
Trad_action magies;
Trad_action attaques;
Trad_action objets;
Trad_action buffs;
Tab_buffs_effectifs buff_eff;


//Méthodes de :

//transfert:
private:
	void tCoClient();//garde l'IP dans IPx et appelle creer0Co
	void tDecoClient();//appelle creer0Deco
	void recoitMess();
	void creer0Co(int id);//créer un message de type 0 dans lequel il attribue l'IDx qui correspond au x de IPx  et transmet a aiguillage (vers superviseur)
	void creer0Deco(int id);//créer un message de type 0 indiquant l'id du joueur qui s'est déco et transmet a aiguillage (vers superviseur)
	
public:// utilisée par aiguillage
	void envoiMess(std::string mess );
//util par superviseur
	void ouvrirConnex();
	
//aiguillage
private:
	void iT0(std::string mess);
	void iT1(std::string mess);
	void iT2(std::string mess);
	void iT3(std::string mess);
	void iT4(std::string mess);
	void iT5(std::string mess);
	void iT6(std::string mess);
	
public://util par transfert
	void decodeMess(string mess);// appelle les iTx
	void aCoClient(int id_c);
